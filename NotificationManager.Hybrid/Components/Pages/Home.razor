@page "/"
@using NotificationManager.Entities.DTO
@using NotificationManager.Hybrid.Components.Layout
@using NotificationManager.Hybrid.Service.Interface
@using NotificationManager.Repository.Interfaces
@inject IApplicationRepository _applicationRepository
@inject INotificationService _notificationService

<TitleBar SelectMultipleClick="selectAppAction" SelectAll="selectAllApp" DeleteItem="deleteSelectedItem" />

<div class="cmp-element container" style="padding-top: 15px;">
    @foreach (var app in appLists)
    {
        <div class="app-data-container px-2 py-2">
            <div class="list-header-content">
                @if (showSelectCheckbox)
                {
                    @if (selectAllCheckbox)
                    {
                        <input type="checkbox" class="select-checkbox" @onchange="(ChangeEventArgs args) => appSelected(app.PackageName, (bool)args.Value)" checked />
                    }
                    else
                    {
                        <input type="checkbox" class="select-checkbox" @onchange="(ChangeEventArgs args) => appSelected(app.PackageName, (bool)args.Value)" />
                    }
                }
                <div class="app-icon">
                    @if (app.AppLogo != null)
                    {
                        <img src="@app.AppLogo" />
                    }
                    else
                    {
                        <img src="default_icon_2.png" />
                    }
                </div>
            </div>
            <div class="list-content">
                <div class="app-name">@app.AppName</div>
                <div class="notification-count">@app.Count</div>
            </div>
        </div>
        <hr style="width:100%;text-align:center;color:silver;">
    }

    <style>
        .app-data-container, .list-content, .list-header-content {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 10px;
        }

        .app-icon > img {
        height: 35px;
        width: 35px;
        border-radius: 40%;
        }

        .list-content {
        width: 100%;
        justify-content: space-between;
        }
    </style>
</div>

@code {
    private List<ApplicationViewDTO> appLists;
    private bool showSelectCheckbox = false;
    private bool selectAllCheckbox = false;
    private bool showDeleteAlert = false;
    private List<string> packageList = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        appLists = await _applicationRepository.GetAllApplicationAsync();
    }

    private void selectAppAction(bool value)
    {
        showSelectCheckbox = value;
    }

    private void selectAllApp(bool value)
    {
        selectAllCheckbox = value;
        if (value)
            packageList = appLists.Select(app => app.PackageName).ToList();
        else packageList.Clear();
    }

    private void appSelected(string package, bool IsChecked)
    {
        if (IsChecked)
        {
            packageList.Add(package);
        }
        else packageList.Remove(package);
    }

    private async void deleteSelectedItem()
    {
        showDeleteAlert = true;
        await _notificationService.DeleteAllNotification(packageList);
    }
}
