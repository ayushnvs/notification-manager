@page "/notification/{package}/{appname}"
@using NotificationManager.Hybrid.Components.Snippets
@using NotificationManager.Hybrid.Components.Style
@using NotificationManager.Hybrid.Service.Interface
@using NotificationManager.Hybrid.Entities.Models
@inject INotificationService _notificationService

<TitleBar @ref="titleBar" PageTitle="@AppName" OnSelectMultipleClick="ShowSelectAction" OnSelectAllItem="SelectAllApp" OnDeleteItem="ShowDeleteAlertBox" OnRefreshClick="RefreshPage" />

<div class="cmp-element container" style="margin-top: 4.5em;padding-top: 15px;">
    <Dialog Title="Delete Alert!" Opened="showDeleteAlert" CloseButtonClicked="@(() => showDeleteAlert = false)">
        <BodyContent>
            <p style="font-size: 16px;">
                Are you sure you want to delete the selected notifications?
            </p>
        </BodyContent>

        <FooterContent>
            <button class="btn ok-button" @onclick="DeleteSelectedNotification">Yes</button>
        </FooterContent>
    </Dialog>
    @foreach(var notification in notificationList)
    {
        <div class="notif-data-container px-2 py-2" >
            <div class="row-1">
                <div class="list-header-content">
                    @if (showSelectCheckbox)
                    {
                        @if (selectAllCheckbox)
                        {
                            <input type="checkbox" class="select-checkbox" @onchange="(ChangeEventArgs args) => itemSelected(notification.Id, (bool)args.Value)" checked />
                        }
                        else
                        {
                            <input type="checkbox" class="select-checkbox" @onchange="(ChangeEventArgs args) => itemSelected(notification.Id, (bool)args.Value)" />
                        }
                    }
                    else {
                        <div class="app-icon">
                            @if (notification.Application.Icon != null)
                            {
                                <img src="@($"data:image /jpeg;base64,{Convert.ToBase64String(notification.Application.Icon)}")" />
                            }
                            else
                            {
                                <img src="icon/default_icon.png" alt="" />
                            }
                        </div>
                    }
                    <div class="notif-title">@notification.NotificationTitle</div>
                </div>
                <div class="notif-time">
                    @notification.RecievedOn.ToString("dd MMM HH:MM")
                </div>
            </div>
            <div class="row-2">
                <div class="list-header-content">
                    <div class="notif-text">@notification.NotificationText</div>
                </div>
            </div>
        </div>
        <hr style="width:100%;text-align:center;color:silver;">
    }

    <PageStyle CurrentPage="@Page.Notification" StyleFormat="StyleFormat.Format2"/>
</div>

@code {
    [Parameter] public string Package { get; set; }
    [Parameter] public string AppName { get; set; } = "Notification";
    private List<NotificationDBO> notificationList { get; set; }
    private List<Guid> notificationIdList = new List<Guid>();
    private bool showSelectCheckbox = false;
    private bool selectAllCheckbox = false;
    private bool showDeleteAlert = false; 
    private TitleBar titleBar;

    protected override async Task OnInitializedAsync()
    {
        notificationList = await _notificationService.GetNotificationsAsync(Package);
    }

    private async Task RefreshPage()
    {
        notificationList = await _notificationService.GetNotificationsAsync(Package);
    }

    private void itemSelected(Guid id, bool IsChecked)
    {
        if (IsChecked)
        {
            notificationIdList.Add(id);
        }
        else notificationIdList.Remove(id);
    }

    private void ShowSelectAction(bool value)
    {
        showSelectCheckbox = value;
    }

    private void SelectAllApp(bool value)
    {
        selectAllCheckbox = value;
        if (value)
            notificationIdList = notificationList.Select(notif => notif.Id).ToList();
        else notificationIdList.Clear();
    }

    private void ShowDeleteAlertBox()
    {
        showDeleteAlert = true;
    }

    private async void DeleteSelectedNotification()
    {
        await _notificationService.DeleteNotificationAsync(notificationIdList);

        List<NotificationDBO> deletedNotification = notificationList.Where(notif => notificationIdList.Contains(notif.Id)).ToList();
        notificationList = notificationList.Except(deletedNotification).ToList();

        notificationIdList.Clear();
        showDeleteAlert = false;
        showSelectCheckbox = false;
        titleBar.BackClick();
    }
}
